rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check for authentication
    function authed() {
      return request.auth != null;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Users can only read and write their own profile
      allow read, write: if authed() && request.auth.uid == userId;
    }

    // Rules for the 'trees' collection and its subcollections
    match /trees/{treeId} {
      // Allow create if the user is authenticated and the ownerId matches their uid.
      allow create: if authed() && request.resource.data.ownerId == request.auth.uid;

      // Allow read, update, delete if the user is the owner of the tree.
      // The 'list' permission is implicitly handled by the 'read' rule when a correct client-side query is made.
      allow read, update, delete: if authed() && resource.data.ownerId == request.auth.uid;

      // Rules for the 'people' subcollection within a tree
      match /people/{personId} {
        // Anyone who can read the parent tree can also read/list the people in it.
        allow read, list: if authed() && get(/databases/$(database)/documents/trees/$(treeId)).data.ownerId == request.auth.uid;

        // Anyone who can edit the parent tree (the owner) can create, update, delete people.
        allow write: if authed() && get(/databases/$(database)/documents/trees/$(treeId)).data.ownerId == request.auth.uid;
      }
    }
  }
}
