rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for authentication.
    function authed() {
      return request.auth != null;
    }

    // Global helper function to check if the user is the owner of a tree.
    // This can be called from other security rules (like Storage Rules).
    function isOwner(treeId) {
      return authed() && get(/databases/$(database)/documents/trees/$(treeId)).data.ownerId == request.auth.uid;
    }

    // Rules for the 'users' collection.
    match /users/{userId} {
      // Users can only read and write their own profile.
      allow read, write: if authed() && request.auth.uid == userId;
    }

    // Rules for the the 'trees' collection and its subcollections.
    match /trees/{treeId} {
      // Allow create if the user is authenticated and the ownerId matches their uid.
      allow create: if authed() && request.resource.data.ownerId == request.auth.uid;

      // Allow a user to query for the list of trees they own.
      // This rule is crucial for the dashboard to function.
      allow list: if authed() && request.query.resource.data.ownerId == request.auth.uid;
      
      // Allow read, update, delete for a specific tree if the user is the owner.
      allow get, update, delete: if isOwner(treeId);

      // Rules for the 'people' subcollection within a tree.
      match /people/{personId} {
        // Anyone who can read/edit the parent tree (the owner) can read/write people.
        allow read, write: if isOwner(treeId);
      }
    }
  }
}
