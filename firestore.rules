rules_version = '2';

service cloud.firestore {
  function authed() {
    return request.auth != null;
  }

  // --- Helpers (Trees) ---
  function treeDoc(treeId) {
    return get(/databases/$(database)/documents/trees/$(treeId));
  }

  function isOwner(treeId) {
    return authed() && treeDoc(treeId).data.ownerId == request.auth.uid;
  }

  function collaboratorRole(treeId) {
    return authed() && treeDoc(treeId).data.collaborators[request.auth.uid];
  }

  function isManagerOrEditor(treeId) {
    return isOwner(treeId) ||
      (collaboratorRole(treeId) == 'manager' || collaboratorRole(treeId) == 'editor');
  }

  function isViewer(treeId) {
    return isManagerOrEditor(treeId) || collaboratorRole(treeId) == 'viewer';
  }

  function isPublic(treeId) {
    return treeDoc(treeId).data.visibility == 'public' || treeDoc(treeId).data.visibility == 'link';
  }

  // --- Validation helpers ---
  function isString(v) { return v is string; }
  function isNumber(v) { return v is number; }
  function isBool(v) { return v is bool; }
  function isMap(v) { return v is map; }
  function isTimestamp(v) { return v is timestamp; }

  function validTreeCreate() {
    let data = request.resource.data;
    return authed()
      && data.ownerId == request.auth.uid
      && isString(data.title) && data.title.size() > 0 && data.title.size() < 100
      && data.visibility in ['private', 'link', 'public']
      && isMap(data.collaborators) && data.collaborators.size() == 0
      && data.memberCount == 0
      && data.createdAt == request.time
      && data.lastUpdated == request.time;
  }

  function validTreeUpdate() {
    let data = request.resource.data;
    let existingData = resource.data;
    return existingData.ownerId == data.ownerId
      && existingData.createdAt == data.createdAt
      && data.lastUpdated == request.time
      && (
        (
          data.collaborators == existingData.collaborators &&
          data.visibility == existingData.visibility
        ) || isOwner(resource.id)
      );
  }

  function validPersonCreateOrUpdate() {
    let data = request.resource.data;
    let existingData = resource.data;
    let expectedKeys = [
      'firstName', 'middleName', 'lastName', 'nickname', 'gender', 'birthDate', 'deathDate',
      'living', 'placeOfBirth', 'placeOfDeath', 'photoURL', 'x', 'y', 'createdAt', 'updatedAt'
    ];
    
    return isString(data.firstName) && data.firstName.size() > 0 && data.firstName.size() < 100
      && isNumber(data.x)
      && isNumber(data.y)
      && data.keys().hasOnly(expectedKeys)
      && (data.gender == null || data.gender in ['male', 'female', 'other', 'unknown'])
      && (data.living == null || isBool(data.living))
      && (
        (resource == null && data.createdAt == request.time) ||
        (resource != null && data.createdAt == existingData.createdAt)
      )
      && data.updatedAt == request.time;
  }

  match /databases/{database}/documents {

    // --- Users: self-only ---
    match /users/{uid} {
      allow create: if authed() && request.auth.uid == uid
        && request.resource.data.createdAt == request.time;
      allow read: if authed() && request.auth.uid == uid;
      allow update: if authed() && request.auth.uid == uid
        && request.resource.data.updatedAt == request.time
        && request.resource.data.plan in ['free','pro','team'];
      allow delete: if authed() && request.auth.uid == uid;
    }

    // --- Trees + subcollections ---
    match /trees/{treeId} {
      allow create: if validTreeCreate();
      allow read: if isPublic(treeId) || (authed() && (isOwner(treeId) || isViewer(treeId)));
      allow update: if authed() && isManagerOrEditor(treeId) && validTreeUpdate();
      allow delete: if authed() && isOwner(treeId);

      // People subcollection
      match /people/{personId} {
        allow read: if isPublic(treeId) || (authed() && (isOwner(treeId) || isViewer(treeId)));
        allow create, update: if authed() && isManagerOrEditor(treeId) && validPersonCreateOrUpdate();
        allow delete: if authed() && isManagerOrEditor(treeId);
      }
    }
  }
}
